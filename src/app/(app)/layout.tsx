import '../../../public/assets/css/animate.min.css'
import '../../../public/assets/css/bootstrap.min.css'
import '../../../public/assets/css/custom.css'
import '../../../public/assets/css/flaticon.min.css'
import '../../../public/assets/css/flaticon_ygency.css'
import '../../../public/assets/css/fontawesome-5.14.0.min.css'
import '../../../public/assets/css/magnific-popup.min.css'
import '../../../public/assets/css/nice-select.min.css'
import '../../../public/assets/css/slick.min.css'
import '../../../public/assets/css/style.css'
import { env } from '@env'
import configPromise from '@payload-config'
import type { Metadata } from 'next'
import { unstable_cache } from 'next/cache'
import { Inter } from 'next/font/google'
import { headers } from 'next/headers'
import { getPayload } from 'payload'
import { Toaster } from 'react-hot-toast'

import '@/app/(app)/globals.css'
import GoogleAdsense from '@/components/GoogleAdsense'
import GoogleAnalytics from '@/components/GoogleAnalytics'
import { UserProvider } from '@/context/UserContext'
import Provider from '@/trpc/Provider'
import { getCurrentUser } from '@/utils/getCurrentUser'
import { MetadataProvider } from '@/utils/metadataContext'

const inter = Inter({ subsets: ['latin'] })

const getCachedSiteSettings = unstable_cache(
  async () => {
    const payload = await getPayload({
      config: configPromise,
    })

    const data = await payload.findGlobal({
      slug: 'site-settings',
      draft: false,
    })

    return data
  },
  ['site-settings'],
  { tags: ['site-settings'] },
)

export async function generateMetadata(): Promise<Metadata> {
  try {
    // calling the site-settings to get all the data
    const metadata = await getCachedSiteSettings()
    const generalSettings = metadata.general

    const ogImageUrl =
      typeof generalSettings.ogImageUrl !== 'object'
        ? generalSettings.ogImageUrl
        : generalSettings.ogImageUrl.sizes?.blogImageSize3?.url!

    const title = {
      default: generalSettings.title,
      template: `%s | ${generalSettings.title}`,
    }
    const description = generalSettings.description
    const ogImage = [
      {
        url: ogImageUrl,
        height: 630,
        width: 1200,
        alt: `og image`,
      },
    ]

    return {
      title,
      description,
      // we're appending the http|https int the env variable
      metadataBase: env.NEXT_PUBLIC_PUBLIC_URL as unknown as URL,
      openGraph: {
        title,
        description,
        images: `${ogImage}`,
      },
      twitter: {
        title,
        description,
        images: `${ogImage}`,
      },
      keywords: generalSettings.keywords,
    }
  } catch (error) {
    // in error case returning a base metadata object
    return {
      title: 'Ygency',
      description: 'Generated by create cql app',
    }
  }
}

export const viewport = {
  colorScheme: 'dark',
  initialScale: 1,
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  const metadata = await getCachedSiteSettings()
  const headersList = await headers()
  const user = await getCurrentUser(headersList)

  const generalSettings = metadata.general

  const faviconUrl =
    typeof generalSettings?.faviconUrl !== 'object'
      ? generalSettings?.faviconUrl
      : generalSettings?.faviconUrl?.url!

  return (
    <html lang='en' className='dark'>
      {/* added a explicit link tag because favicon is coming from site-settings */}
      <link rel='icon' type='image/x-icon' href={`${faviconUrl}`} />

      <head>
        <GoogleAnalytics metadata={metadata} />
        <GoogleAdsense metadata={metadata} />
      </head>

      <body className={`${inter.className}`}>
        <UserProvider initialUser={user}>
          <MetadataProvider metadata={metadata}>
            <Provider>{children}</Provider>
          </MetadataProvider>
        </UserProvider>

        <Toaster position='bottom-right' />
      </body>
    </html>
  )
}
